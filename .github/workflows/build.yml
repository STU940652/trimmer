name: Build

on: [push,workflow_dispatch]
  #push:
  #  tags:
  #    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env: 
  version_number: 1.${{ github.ref_name }}.${{ github.run_number}}

jobs:

  createrelease:
    name: Create Release
    runs-on: [ubuntu-latest] 
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.version_number }}
        release_name: Release ${{ env.version_number }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt
    - name: Get Chromedriver Version
      id: chromedriver_version
      run: curl https://chromedriver.storage.googleapis.com/LATEST_RELEASE -o chromedriver_version.txt
    - name: Save Chromedriver Version
      uses: actions/upload-artifact@v1
      with:
        name: chromedriver_version
        path: chromedriver_version.txt
        
  build_osx:
    name: Build OSX
    needs: createrelease
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v1
    
    - name: Get Chromedriver Version
      uses: actions/download-artifact@v1
      with:
        name: chromedriver_version 
        
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Build with pyinstaller
      run: >
        echo "Version number: $version_number" &&
        echo "Chromedriver version: $(cat chromedriver_version/chromedriver_version.txt)" &&
        pushd ext/OSX &&
        curl -O https://chromedriver.storage.googleapis.com/$(cat ../../chromedriver_version/chromedriver_version.txt)/chromedriver_mac64.zip &&
        unzip chromedriver_mac64.zip &&
        popd &&
        pyinstaller Trimmer.spec --clean -y &&
        cd dist/ &&
        zip -r9 Trimmer-$version_number-OSX.zip Trimmer.app/
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release File Name & Upload URL
      id: get_release_info
      shell: bash
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./dist/Trimmer-${{ env.version_number }}-OSX.zip
        asset_name: Trimmer-1.${{ env.version_number }}-OSX.zip
        asset_content_type: application/zip
        
        
        
        
  build_win:
    name: Build Win-64
    needs: createrelease
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v1
    
    - name: Get Chromedriver Version
      uses: actions/download-artifact@v1
      with:
        name: chromedriver_version 
        
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Build with pyinstaller
      shell: cmd
      run: |
        echo "Version number: %version_number% "
        set /p chromedriver_version= < chromedriver_version/chromedriver_version.txt
        echo "Chromedriver version: %chromedriver_version%"
        pushd ext\OSX
        curl -O https://chromedriver.storage.googleapis.com/%chromedriver_version%/chromedriver_win32.zip
        dir
        7z e .\chromedriver_win32.zip
        dir
        popd
        pyinstaller Trimmer.spec --clean -y
        cd inno/
        "%ProgramFiles(x86)%\Inno Setup 6\ISCC.exe" Trimmer.iss
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release File Name & Upload URL
      id: get_release_info
      shell: bash
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./inno/Output/Trimmer-1.${{ env.version_number }}-Win64.exe
        asset_name: Trimmer-${{ env.version_number }}-Win64.exe
        asset_content_type: application/vnd.microsoft.portable-executable